version: "3.9"
services:
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    environment:
      - TZ=${TZ}
    volumes:
      - /volume1/docker/influxdb/data:/var/lib/influxdb2
      - /volume1/docker/influxdb/config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - tds_net
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    environment:
      - TZ=${TZ}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - /volume1/docker/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - tds_net
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - /volume1/docker/prometheus/config:/etc/prometheus
      - /volume1/docker/prometheus/data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tds_net
    restart: unless-stopped

  telegraf:
    image: telegraf
    container_name: telegraf
    volumes:
      - /volume1/docker/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    environment:
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - TZ=${TZ}
    networks:
      - tds_net
    restart: unless-stopped

  speedtest:
    image: mikeroyal/speedtest-exporter
    container_name: speedtest
    ports:
      - "9798:9798"
    networks:
      - tds_net
    restart: unless-stopped

  unifi-poller:
    image: golift/unifi-poller
    container_name: unifi-poller
    environment:
      - TZ=${TZ}
      - UP_UNIFI_DEFAULT_USER=${UP_UNIFI_DEFAULT_USER}
      - UP_UNIFI_DEFAULT_PASS=${UP_UNIFI_DEFAULT_PASS}
      - UP_UNIFI_DEFAULT_URL=${UP_UNIFI_DEFAULT_URL}
    volumes:
      - /volume1/docker/unifi-poller:/config
    ports:
      - "9130:9130"
    networks:
      - tds_net
    restart: unless-stopped

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    restart: unless-stopped
    networks:
      - tds_net

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
    command: --cleanup --label-enable --interval 300
    networks:
      - tds_net
    restart: unless-stopped

networks:
  tds_net:
    external: true